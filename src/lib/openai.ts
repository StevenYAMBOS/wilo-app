// src/lib/openai.ts

import { OpenAI } from "openai";
// import { OPENAI_API_KEY } from "$env/static/private";

const openai = new OpenAI({
  apiKey: "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",
});

export async function generateActivityProposal(events: any[], location?: string) {
  const userAvailability = analyzeAvailability(events);

  // ğŸ”¹ VÃ©rifier si des crÃ©neaux sont disponibles
  if (userAvailability.length === 0) {
    return [
      "Pas de crÃ©neau dispo aujourd'hui ! Mais pas de panique, on trouvera un moment bientÃ´t ! ğŸš€",
    ];
  }

  // ğŸ”¹ Limiter les crÃ©neaux envoyÃ©s Ã  OpenAI (max 3 crÃ©neaux)
  const limitedAvailability = userAvailability.slice(0, 3);

  // ğŸ”¹ Construire le prompt optimisÃ©
  const prompt = `
  Tu es un assistant bien-Ãªtre pour les employÃ©s en entreprise. Ton ton est amical, dÃ©tendu et professionnel.
  Voici les crÃ©neaux disponibles de l'utilisateur aujourd'hui :
  ${limitedAvailability.map((slot) => `- ${slot.start} Ã  ${slot.end}`).join("\n")}

  Si possible, propose **2 activitÃ©s physiques courtes (10-15 min max)** adaptÃ©es Ã  ces crÃ©neaux.
  Si la localisation est connue (${location ? `"${location}"` : "aucune"}), propose des activitÃ©s proches du lieu.

  Si aucun crÃ©neau n'est dispo, rassure l'utilisateur en lui disant qu'on trouvera un moment bientÃ´t. ğŸš€

  RÃ©ponds sous forme de liste numÃ©rotÃ©e, sans introduction ni conclusion.`;

  try {
    const response = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [{ role: "system", content: prompt }],
      max_tokens: 50, // ğŸ”¹ Limite le coÃ»t
      temperature: 0.7, // ğŸ”¹ RÃ©duit la variabilitÃ© des rÃ©ponses
    });

    const aiResponse = response.choices[0]?.message?.content || "";

    // ğŸ”¹ SÃ©parer la rÃ©ponse en plusieurs messages et limiter Ã  2 suggestions
    const activityMessages = aiResponse
      .split("\n")
      .filter((line) => line.trim() !== "")
      .slice(0, 2); // ğŸ”¹ Max 2 activitÃ©s

    return activityMessages.length > 0 ? activityMessages : ["Je n'ai pas pu gÃ©nÃ©rer de suggestion."];
  } catch (error) {
    console.error("Erreur OpenAI :", error);
    return ["Erreur lors de la gÃ©nÃ©ration des suggestions."];
  }
}

// ğŸ”¹ Fonction pour analyser les disponibilitÃ©s
function analyzeAvailability(events: any[]) {
  // Trier les Ã©vÃ©nements par date
  events.sort((a, b) => new Date(a.start).getTime() - new Date(b.start).getTime());

  let availability: { start: string; end: string }[] = [];
  let lastEnd = "08:00"; // DÃ©but de la journÃ©e de travail

  events.forEach((event) => {
    const eventStart = event.start.slice(11, 16);
    const eventEnd = event.end.slice(11, 16);

    if (eventStart > lastEnd) {
      availability.push({ start: lastEnd, end: eventStart });
    }

    lastEnd = eventEnd;
  });

  if (lastEnd < "18:00") {
    availability.push({ start: lastEnd, end: "18:00" });
  }

  return availability;
}
